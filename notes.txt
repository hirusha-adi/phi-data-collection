this is my old

class QuestionForm(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    cockroaches = db.Column(db.Boolean)

    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    last_updated = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Inspection Record - Location relationship
    location_id = db.Column(db.Integer, db.ForeignKey('location.id'))
    location = db.relationship('Location', backref=db.backref('forms', lazy=True))
    
    # Inspection Record - User relationship (see who created it)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id')) 
    user = db.relationship('User', backref=db.backref('forms', lazy=True)) 


below are the changes i want to make

Question Form
it will be based on a scoring system
store all these questions in this single table (as fields)
use suitable data types as names for fields

general details
- Premises registered under the regulation (yes: 5, no: 0)
- Registration certificate displayed (yes: 5, no: 0)
- Not convicted within one year (yes: 5, no: 0)
- Food not destroyed within one year (yes: 5, no: 0)

building details
- Safe water: (yes: 4, no: 0)
- Cleanliness and cleaning (no: 0, mediocre: 2, yes: 4)
- Pests and animals (no: 0, mediocre: 2, yes: 4)
- Sound pollution (no: 0, mediocre: 2, yes: 4)
- Toilets cleanliness (no: 0, mediocre: 2, yes: 4)

food handler
- Medical certificates (no: 0, mediocre: 2, yes: 5)
- Hair net/head cap, mask, gloves, slippers/shoes (no: 0, mediocre: 2, yes: 5)
- Unhygienic behaviour (no: 0, mediocre: 2, yes: 5)
- Use clean utensils to serve food (no: 0, mediocre: 2, yes: 5)

Processing and serving
- Walls Hygienic (no: 0, mediocre: 2, yes: 4)
- Floor Hygienic (no: 0, mediocre: 2, yes: 4)
- Ceiling Hygienic (no: 0, mediocre: 2, yes: 4)
- Food-contactable surfaces (no: 0, mediocre: 2, yes: 4)
- Wastewater (Sanitary disposal of water) (no: 0, yes: 2)
- Waste bins (All closed) (no: 0, yes: 2)

Food storage
- Cooked perishable food - Kept closed (no: 0, mediocre: 2, yes: 4) 
- Cooked perishable food - 2/4 temperature rule (no: 0, mediocre: 2, yes: 4) 
- Cooked perishable food - Stored in food-grade container (no: 0, mediocre: 2, yes: 4) 
- Cooked perishable food - Contamination prevented (no: 0, mediocre: 2, yes: 4) 
- Uncooked food - Contamination prevented (no: 0, mediocre: 2, yes: 4) 


then, write me the frotnend and the backend code as well
pasted below are the old codes
i want you to update them

<form method="POST" class="space-y-4">
    <div>
      <label for="location" class="label text-sm font-medium">Select Location</label>
      <select name="location" id="location" class="select select-bordered w-full" required>
        <option value="" disabled selected>-- Choose a Location --</option>
        {% for location in locations %}
          <option value="{{ location.id }}">{{ location.name }}, {{ location.area.name }}</option>
        {% endfor %}
      </select>
    </div>
    <div>
      <label for="cockroaches" class="label text-sm font-medium">Cockroach Presence</label>
      <select name="cockroaches" id="cockroaches" class="select select-bordered w-full" required>
        <option value="True">Yes</option>
        <option value="False">No</option>
      </select>
    </div>
    <button type="submit" class="btn btn-primary w-full">ðŸ’¾ Save Inspection</button>
</form>


@main.route('/add_form', methods=['GET', 'POST'])
@login_required
def add_form():
    locations = Location.query.all()

    if request.method == 'POST':
        try:
            location_id = int(request.form.get('location'))
            cockroaches_value = request.form.get('cockroaches')  # 'True' or 'False' as strings
            cockroaches = cockroaches_value == 'True'

            q = QuestionForm(
                location_id=location_id,
                cockroaches=cockroaches,
                user_id=current_user.id
            )
            db.session.add(q)
            db.session.commit()
            return redirect(url_for('main.dashboard'))
        except (TypeError, ValueError):
            flash("Invalid input. Please try again.", "error")

    return render_template('add_form.html', locations=locations)



